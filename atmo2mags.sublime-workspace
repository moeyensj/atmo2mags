{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"compute",
				"computeChiSquared"
			],
			[
				"WAV",
				"WAVELENSTEP"
			],
			[
				"WAVEL",
				"WAVELENMAX"
			],
			[
				"WA",
				"WAVELENMIN"
			],
			[
				"STD",
				"STDAEROSOLNORMCOEFF"
			],
			[
				"wds",
				"wds"
			]
		]
	},
	"buffers":
	[
		{
			"file": "AtmoBuilder.py",
			"settings":
			{
				"buffer_size": 133683,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Atmo.py",
			"settings":
			{
				"buffer_size": 2411,
				"line_ending": "Unix"
			}
		},
		{
			"file": "writeup/stars2atmo.tex",
			"settings":
			{
				"buffer_size": 12408,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/joachim/.bash_profile",
			"settings":
			{
				"buffer_size": 1768,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/joachim/lsst/loadLSST.bash",
			"settings":
			{
				"buffer_size": 607,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/local/Library/Taps/homebrew/homebrew-science/opencv.rb",
			"settings":
			{
				"buffer_size": 6374,
				"line_ending": "Unix"
			}
		},
		{
			"file": "old/provided scripts/AtmoComp.py",
			"settings":
			{
				"buffer_size": 16325,
				"line_ending": "Unix"
			}
		},
		{
			"file": "old/provided scripts/plot_dmags.py",
			"settings":
			{
				"buffer_size": 36661,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-92-g76d04b8+5/python/lsst/sims/photUtils/PhysicalParameters.py",
			"settings":
			{
				"buffer_size": 2611,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-92-g76d04b8+5/python/lsst/sims/photUtils/Sed.py",
			"settings":
			{
				"buffer_size": 49616,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-92-g76d04b8+5/python/lsst/sims/photUtils/Bandpass.py",
			"settings":
			{
				"buffer_size": 21389,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/joachim/atmo2mags"
	],
	"file_history":
	[
		"/Users/joachim/atmo2mags/stdAtmo.txt",
		"/Users/joachim/atmo2mags/.git/MERGE_MSG",
		"/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-77-g82a337b+26/python/lsst/sims/photUtils/photometricDefaults.py",
		"/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-77-g82a337b+26/python/lsst/sims/photUtils/Bandpass.py",
		"/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-77-g82a337b+26/python/lsst/sims/photUtils/Sed.py",
		"/Users/joachim/.bash_profile",
		"/Users/joachim/repos/astro480/irafvi/easy_phot.py",
		"/Users/joachim/iraf/login.cl",
		"/Users/joachim/atmo2mags/Decorators.py",
		"/Users/joachim/.bash_profile.bak",
		"/Users/joachim/atmo2mags/test/test.py",
		"/Users/joachim/atmo2mags/old/astroML/fig_nonlinear_mu_z.py",
		"/Users/joachim/atmo2mags/old/provided scripts/plot_dmags.py",
		"/Users/joachim/atmo2mags/old/provided scripts/AtmoComp.py",
		"/Users/joachim/atmo2mags/Atmo.py",
		"/Users/joachim/atmo2mags/AtmoBuilder.py",
		"/Users/joachim/lsst/DarwinX86/sims_photUtils/master-gf4b08de607+4/python/lsst/sims/photUtils/Sed.py",
		"/Users/joachim/lsst/DarwinX86/sims_photUtils/master-gf4b08de607+4/python/lsst/sims/photUtils/Bandpass.py",
		"/Users/joachim/atmo2mags/Modtran.py",
		"/Users/joachim/tres3b",
		"/Users/joachim/jskycalc/.bash_profile",
		"/Users/joachim/repos/forked/.bash_profile",
		"/Users/joachim/atmo2mags/.git/COMMIT_EDITMSG",
		"/Users/joachim/atmo2mags/X14_P101010122217_Rayleigh_Aerosol_XSTD12_25bins_y4_kurucz_DG1.200.pkl",
		"/Users/joachim/atmo2mags/decorators.py",
		"/Users/joachim/repos/forked/ast597b/.git/COMMIT_EDITMSG"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_dmagSed",
			"comp1",
			"def computeDeltaGreyFit(self, comp, deltaGrey, atmo_obs, err=5.0, componentBins=50, deltaGreyBins=50, deltaGreyRange=[-50.0,50.0], \n        computeChiSquared=True, regressionSed='mss', comparisonSeds=SEDTYPES, plotDmags=True, plotDphi=True, saveLogL=True, useLogL=False, \n        saveChiSquared = True, plotChiSquared = True, plotLogL=False, plotBoth=True, normalize=True, includeColorBar=False, \n        plotDifferenceRegression=False, plotDifferenceComparison=True, pickleString='', filters=FILTERLIST, dmagLimit=True, \n        returnData=False, verbose=True):\n        \"\"\"\n        Computes the best fit atmospheric parameters for two given components and an observed atmosphere. Requires the \n        SED data for the specified regression and comparison SEDs to be read in. \n\n        Parameters:\n        ----------------------\n        parameter: (dtype) [default (if optional)], information\n\n        comp: (string), name of component to regress\n        deltaGrey: (float), adds extinction factor due to clouds (if less than 0 will subract mean dmags, \n            if greater than zero will subtract as mmag value from delta magnitudes during regression)\n        atmo_obs: (atmo object), observed atmosphere\n        err: (float) [5.00], err in millimagnitudes\n        componentBins: (int) [50], number of bins for regression\n        deltaGreyBins: (int) [50], number of bins for regression over deltaGrey space\n        deltaGreyRange: (list of ints), min and max deltaGrey value between which to regress\n        regressionSed: (string) ['mss'], SED type to run regress over\n        comparisonSeds: (list of strings) [SEDTYPES], \n        plotDmags: (boolean) [True], generate a regression plot\n        plotDphi: (boolean) [True], generate a dphi and ddphi plot\n        saveLogL: (boolean) [True], save logL as txt file\n        useLogL: (boolean) [False], use logL to replace contour plots\n        saveChiSquared: (boolean) [True], save chi-squared as txt file\n        plotChiSquared: (boolean) [True], generate a plot of chi-squared\n        plotLogL: (boolean) [False], plot individual logLs and contours seperately\n        plotBoth: (boolean) [False], plot both logLs and contours\n        normalize: (boolean) [True], normalize logL by median when plotting\n        includeColorBar: (boolean) [False], include logL color bar (requires useLogL to be True)\n        plotDifferenceRegression: (boolean) [False], plot ddmmags for regression SEDs\n        plotDifferenceComparison: (boolean) [True], plot ddmmags for comparison SEDs\n        pickleString: (string) [''], add custom string to plot titles\n        filters: (list of strings) [FILTERLIST], list of filters\n        dmagLimit: (boolean) [True], create +-2 mmags axis lines if certain axis requirements\n            are met. \n        returnData: (boolean) [False], return data elements\n        verbose: (boolean) [True], print out verbose statements\n        ----------------------\n        \"\"\"\n        # Insure valid parameters, airmass and sedtypes are given\n        self._sedTypeCheck(regressionSed)\n\n        # Find range over which to vary parameter and the parameter number for comp1, comp2\n        range1, pNum1 = self._componentCheck(comp,componentBins)\n        dgrange = np.linspace(deltaGreyRange[0], deltaGreyRange[1], deltaGreyBins)\n\n        # Find seds and sedkeylist for sedtype\n        seds, sedkeylist = self._sedFinder(regressionSed)\n\n        if verbose:\n            print 'Computing nonlinear regression for ' + comp + '.'\n            print 'Observed atmosphere parameters: ' + str(atmo_obs.P)\n            print 'Observed atmosphere airmass:    ' + str(atmo_obs.X)\n            print 'Standard atmosphere parameters: ' + str(STDPARAMETERS)\n            print 'Standard atmosphere airmass:    ' + str(STDAIRMASS)\n            print 'Observed atmosphere parameter for ' + comp + ': ' + str(atmo_obs.P[pNum1])\n            print ''\n            print 'Fitting for %s between %.2f and %.2f in %s bins.' % (comp, min(range1), max(range1), componentBins)\n            print ''\n            print 'Fitting for deltaGrey between %.2f and %.2f mmags in %s bins.' % (min(dgrange), max(dgrange), deltaGreyBins)\n            print ''\n            total = componentBins*deltaGreyBins\n\n            print 'Regressing %s parameter combinations per filter...' % (total)\n            print ''\n        \n        P_fit = copy.deepcopy(atmo_obs.P)\n        X_fit = copy.deepcopy(atmo_obs.X)\n\n        # Create standard atmosphere and magnitudes\n        std = self.buildAtmo(STDPARAMETERS,STDAIRMASS)\n        throughput_std = self.combineThroughputs(std, filters=filters)\n        mags_std = self.mags(throughput_std, seds=seds, sedkeylist=sedkeylist, filters=filters)\n\n        # Create observed atmosphere and magnitudes\n        throughput_obs = self.combineThroughputs(atmo_obs)\n        mags_obs = self.mags(throughput_obs, seds=seds, sedkeylist=sedkeylist, filters=filters)\n        dmags_obs = self.dmags(mags_obs, mags_std, filters=filters, deltaGrey=deltaGrey)\n\n        logL = {}\n        whr = {}\n        compbest = {}\n        dgbest = {}\n        dmagsbest = {}\n        chisquared = {}\n        chisquaredbest = {}\n\n        figName = self._regressionNameGen(comp, 'dG', atmo_obs, componentBins, err, regressionSed, \n            deltaGrey, deltaGreyBins, deltaGreyRange, add=pickleString)\n\n        for f in filters:\n\n            pickleString_temp = self._regressionNameGen(comp, 'dG', atmo_obs, componentBins, err, regressionSed, \n                deltaGrey, deltaGreyBins, deltaGreyRange, add=pickleString, pickle=True, f=f)\n                    \n            print 'Calculating best fit parameters for ' + f + ' filter...'\n\n            @pickle_results(os.path.join(PICKLEDIRECTORY, pickleString_temp))\n            def run_regression(comp1, comp2, f):\n                \n                logL = []\n                whr = []\n                compbest = []\n                dgbest = []\n                dmagsbest = []\n                chisquared = []\n                chisquaredbest = []\n\n                if computeChiSquared:\n                    logL = np.ndarray([componentBins,deltaGreyBins])\n                    dmags_fit = np.ndarray([componentBins,deltaGreyBins,len(seds)])\n                    chisquared = np.ndarray([componentBins,deltaGreyBins])\n\n                    for d,dg in enumerate(dgrange):\n                        for i in range(len(range1)):\n                                P_fit[pNum1] = range1[i]\n                                logL[i,d], dmags_fit[i,d,:] = self._computeLogL(P_fit, X_fit, err, f, dmags_obs, mags_std, seds, sedkeylist, dg)\n                                chisquared[i,d] = self._computeChiSquared(dmags_fit[i,d], dmags_obs[f], err)\n\n                    logL -= np.amax(logL)\n                    whr = np.where(logL == np.amax(logL))\n                    compbest = range1[whr[0][0]]\n                    dgbest = dgrange[whr[1][0]]\n                    dmagsbest = dmags_fit[whr[0][0]][whr[1][0]][whr[2][0]]\n                    chisquaredbest = chisquared[whr[0][0]][whr[1][0]]\n\n                else:\n                    logL = np.ndarray([componentBins,deltaGreyBins])\n                    dmags_fit = np.ndarray([componentBins,deltaGreyBins,len(seds)])\n            \n                    for i in range(len(range1)):\n                        for j in range(len(range2)):\n                            P_fit[pNum1] = range1[i]\n                            logL[i,d], dmags_fit[i,d,:] = self._computeLogL(P_fit, X_fit, err, f, dmags_obs, mags_std, seds, sedkeylist, deltaGrey)\n\n                    logL -= np.amax(logL)\n                    whr = np.where(logL == np.amax(logL))\n                    compbest = range1[whr[0][0]]\n                    dgbest = dgrange[whr[1][0]]\n                    dmagsbest = dmags_fit[whr[0][0]][whr[1][0]][0]\n\n                return compbest, dgbest, dmagsbest, logL, chisquared, chisquaredbest\n\n            comp1best[f], dgbest[f], dmagsbest[f], logL[f], chisquared[f], chisquaredbest[f] = run_regression(comp1, comp2, f)\n\n            \"\"\"\n            if saveLogL and deltaGrey != 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(LOGLDIRECTORY, name + '_logL.txt'), logL[f][:,:,np.where(dgrange == dgbest[f])[0][0]])\n                print 'Saved LogL at best fit deltaGrey for ' + f + ' filter.'\n            elif saveLogL and deltaGrey == 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(LOGLDIRECTORY, name + '_logL.txt'), logL[f][:,:])\n                print 'Saved LogL for ' + f + ' filter.'\n\n            if saveChiSquared and deltaGrey != 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(CHISQUAREDDIRECTORY, name + '_chi.txt'), chisquared[f][:,:,np.where(dgrange == dgbest[f])[0][0]])\n                print 'Saved Chi-Squared at best fit deltaGrey for ' + f + ' filter.'\n            elif saveChiSquared and deltaGrey == 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(CHISQUAREDDIRECTORY, name + '_chi.txt'), chisquared[f][:,:])\n                print 'Saved Chi-Squared for ' + f + ' filter.'\n\n            \"\"\"\n\n            print 'Completed ' + f + ' filter.'\n            print ''\n\n        if verbose:\n            print ''\n            print r'Best fit parameters (Filter, %s, %s):' % (comp1, 'dG')\n            for f in filters:\n                print '%s %.2f %.2f' % (f, compbest[f], dgbest[f])\n    \n        if plotDphi:\n\n            throughput_fit = {}\n\n            for f in filters:\n                P_fit[pNum1] = compbest[f]\n                atmo_fit = self.buildAtmo(P_fit,X_fit)\n                throughput_fit[f] = self.combineThroughputs(atmo_fit,filters=f)[f]\n\n            self.dphiPlot(throughput_obs, throughput_std, bpDict2=throughput_fit, filters=filters, regression=True, figName=figName)\n            self.ddphiPlot(throughput_obs, throughput_fit, throughput_std, filters=filters, regression=True, figName=figName)\n\n        \"\"\"\n        if plotDmags:\n            comparison_dmags_fit, comparison_dmags_obs = self.regressionPlot(comp1, comp1best, comp2, comp2best, dgbest, logL, atmo_obs, componentBins=componentBins, deltaGrey=deltaGrey,\n                deltaGreyBins=deltaGreyBins, deltaGreyRange=deltaGreyRange, figName=figName, regressionSed=regressionSed, comparisonSeds=comparisonSeds, \n                plotDifferenceRegression=plotDifferenceRegression, plotDifferenceComparison=plotDifferenceComparison, useLogL=useLogL, \n                dmagLimit=dmagLimit, includeColorBar=includeColorBar, normalize=normalize, plotBoth=plotBoth, filters=filters, verbose=verbose)\n\n        if plotChiSquared:\n            self.chiSquaredPlot(comp1, comp1best, comp2, comp2best, dgbest, deltaGrey, chisquared, componentBins=componentBins, deltaGreyBins=deltaGreyBins, \n                deltaGreyRange=deltaGreyRange, filters=filters, figName=figName)\n        \"\"\"\n\n        if returnData:\n            return compbest, dgbest, dmagsbest,logL, chisquared, chisquaredbest, dmags_obs #, comparison_dmags_fit, comparison_dmags_obs\n        else:\n            return",
			"sci",
			"0.005",
			"_regressionNameGen",
			"mssLIst",
			"mlt",
			"computeLogL",
			"dmagSED",
			"sedFinder",
			"colorCheck",
			"sedReadCheck",
			"sedTypeCheck",
			"airmassCheck",
			"parameterCheck",
			"componentCheck",
			"regressionNameGen",
			"figNameGen",
			"sed_labelGen",
			"labelGen",
			"dmagLimit",
			"pToString",
			"airmassToString",
			"Bandpass",
			"Nbins",
			"bins",
			"filters = 'y4'",
			"readKurucz",
			"filters=None",
			"y4Check",
			"pickleNameGen",
			"self.wavelength",
			"wavelengthRange",
			"Check(filters)",
			"filters = self.y4",
			"MAXWAVELEN",
			"MINWAVELEN",
			"plotHeight",
			"plotWidth",
			"filterCheck",
			"gallist",
			"__buildAtmo",
			"atmoTrans",
			"genAtmo",
			"atmoTemplates",
			"atmoTrans",
			"atmoTemplates",
			"aerosol",
			"combineThrough",
			"dPhi",
			"shift_",
			"numpy",
			"pylab",
			"SEEING",
			"sedtypeCheck",
			"melts",
			"self.filterlist"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"def computeDeltaGreyFit(self, comp, deltaGrey, atmo_obs, err=5.0, componentBins=50, deltaGreyBins=50, deltaGreyRange=[-50.0,50.0], \n        computeChiSquared=True, regressionSed='mss', comparisonSeds=SEDTYPES, plotDmags=True, plotDphi=True, saveLogL=True, useLogL=False, \n        saveChiSquared = True, plotChiSquared = True, plotLogL=False, plotBoth=True, normalize=True, includeColorBar=False, \n        plotDifferenceRegression=False, plotDifferenceComparison=True, pickleString='', filters=FILTERLIST, dmagLimit=True, \n        returnData=False, verbose=True):\n        \"\"\"\n        Computes the best fit atmospheric parameters for two given components and an observed atmosphere. Requires the \n        SED data for the specified regression and comparison SEDs to be read in. \n\n        Parameters:\n        ----------------------\n        parameter: (dtype) [default (if optional)], information\n\n        comp: (string), name of component to regress\n        deltaGrey: (float), adds extinction factor due to clouds (if less than 0 will subract mean dmags, \n            if greater than zero will subtract as mmag value from delta magnitudes during regression)\n        atmo_obs: (atmo object), observed atmosphere\n        err: (float) [5.00], err in millimagnitudes\n        componentBins: (int) [50], number of bins for regression\n        deltaGreyBins: (int) [50], number of bins for regression over deltaGrey space\n        deltaGreyRange: (list of ints), min and max deltaGrey value between which to regress\n        regressionSed: (string) ['mss'], SED type to run regress over\n        comparisonSeds: (list of strings) [SEDTYPES], \n        plotDmags: (boolean) [True], generate a regression plot\n        plotDphi: (boolean) [True], generate a dphi and ddphi plot\n        saveLogL: (boolean) [True], save logL as txt file\n        useLogL: (boolean) [False], use logL to replace contour plots\n        saveChiSquared: (boolean) [True], save chi-squared as txt file\n        plotChiSquared: (boolean) [True], generate a plot of chi-squared\n        plotLogL: (boolean) [False], plot individual logLs and contours seperately\n        plotBoth: (boolean) [False], plot both logLs and contours\n        normalize: (boolean) [True], normalize logL by median when plotting\n        includeColorBar: (boolean) [False], include logL color bar (requires useLogL to be True)\n        plotDifferenceRegression: (boolean) [False], plot ddmmags for regression SEDs\n        plotDifferenceComparison: (boolean) [True], plot ddmmags for comparison SEDs\n        pickleString: (string) [''], add custom string to plot titles\n        filters: (list of strings) [FILTERLIST], list of filters\n        dmagLimit: (boolean) [True], create +-2 mmags axis lines if certain axis requirements\n            are met. \n        returnData: (boolean) [False], return data elements\n        verbose: (boolean) [True], print out verbose statements\n        ----------------------\n        \"\"\"\n        # Insure valid parameters, airmass and sedtypes are given\n        self._sedTypeCheck(regressionSed)\n\n        # Find range over which to vary parameter and the parameter number for comp1, comp2\n        range1, pNum1 = self._componentCheck(comp,componentBins)\n        dgrange = np.linspace(deltaGreyRange[0], deltaGreyRange[1], deltaGreyBins)\n\n        # Find seds and sedkeylist for sedtype\n        seds, sedkeylist = self._sedFinder(regressionSed)\n\n        if verbose:\n            print 'Computing nonlinear regression for ' + comp + '.'\n            print 'Observed atmosphere parameters: ' + str(atmo_obs.P)\n            print 'Observed atmosphere airmass:    ' + str(atmo_obs.X)\n            print 'Standard atmosphere parameters: ' + str(STDPARAMETERS)\n            print 'Standard atmosphere airmass:    ' + str(STDAIRMASS)\n            print 'Observed atmosphere parameter for ' + comp + ': ' + str(atmo_obs.P[pNum1])\n            print ''\n            print 'Fitting for %s between %.2f and %.2f in %s bins.' % (comp, min(range1), max(range1), componentBins)\n            print ''\n            print 'Fitting for deltaGrey between %.2f and %.2f mmags in %s bins.' % (min(dgrange), max(dgrange), deltaGreyBins)\n            print ''\n            total = componentBins*deltaGreyBins\n\n            print 'Regressing %s parameter combinations per filter...' % (total)\n            print ''\n        \n        P_fit = copy.deepcopy(atmo_obs.P)\n        X_fit = copy.deepcopy(atmo_obs.X)\n\n        # Create standard atmosphere and magnitudes\n        std = self.buildAtmo(STDPARAMETERS,STDAIRMASS)\n        throughput_std = self.combineThroughputs(std, filters=filters)\n        mags_std = self.mags(throughput_std, seds=seds, sedkeylist=sedkeylist, filters=filters)\n\n        # Create observed atmosphere and magnitudes\n        throughput_obs = self.combineThroughputs(atmo_obs)\n        mags_obs = self.mags(throughput_obs, seds=seds, sedkeylist=sedkeylist, filters=filters)\n        dmags_obs = self.dmags(mags_obs, mags_std, filters=filters, deltaGrey=deltaGrey)\n\n        logL = {}\n        whr = {}\n        compbest = {}\n        dgbest = {}\n        dmagsbest = {}\n        chisquared = {}\n        chisquaredbest = {}\n\n        figName = self._regressionNameGen(comp, 'dG', atmo_obs, componentBins, err, regressionSed, \n            deltaGrey, deltaGreyBins, deltaGreyRange, add=pickleString)\n\n        for f in filters:\n\n            pickleString_temp = self._regressionNameGen(comp, 'dG', atmo_obs, componentBins, err, regressionSed, \n                deltaGrey, deltaGreyBins, deltaGreyRange, add=pickleString, pickle=True, f=f)\n                    \n            print 'Calculating best fit parameters for ' + f + ' filter...'\n\n            @pickle_results(os.path.join(PICKLEDIRECTORY, pickleString_temp))\n            def run_regression(comp1, comp2, f):\n                \n                logL = []\n                whr = []\n                compbest = []\n                dgbest = []\n                dmagsbest = []\n                chisquared = []\n                chisquaredbest = []\n\n                if computeChiSquared:\n                    logL = np.ndarray([componentBins,deltaGreyBins])\n                    dmags_fit = np.ndarray([componentBins,deltaGreyBins,len(seds)])\n                    chisquared = np.ndarray([componentBins,deltaGreyBins])\n\n                    for d,dg in enumerate(dgrange):\n                        for i in range(len(range1)):\n                                P_fit[pNum1] = range1[i]\n                                logL[i,d], dmags_fit[i,d,:] = self._computeLogL(P_fit, X_fit, err, f, dmags_obs, mags_std, seds, sedkeylist, dg)\n                                chisquared[i,d] = self._computeChiSquared(dmags_fit[i,d], dmags_obs[f], err)\n\n                    logL -= np.amax(logL)\n                    whr = np.where(logL == np.amax(logL))\n                    compbest = range1[whr[0][0]]\n                    dgbest = dgrange[whr[1][0]]\n                    dmagsbest = dmags_fit[whr[0][0]][whr[1][0]][whr[2][0]]\n                    chisquaredbest = chisquared[whr[0][0]][whr[1][0]]\n\n                else:\n                    logL = np.ndarray([componentBins,deltaGreyBins])\n                    dmags_fit = np.ndarray([componentBins,deltaGreyBins,len(seds)])\n            \n                    for i in range(len(range1)):\n                        for j in range(len(range2)):\n                            P_fit[pNum1] = range1[i]\n                            logL[i,d], dmags_fit[i,d,:] = self._computeLogL(P_fit, X_fit, err, f, dmags_obs, mags_std, seds, sedkeylist, deltaGrey)\n\n                    logL -= np.amax(logL)\n                    whr = np.where(logL == np.amax(logL))\n                    compbest = range1[whr[0][0]]\n                    dgbest = dgrange[whr[1][0]]\n                    dmagsbest = dmags_fit[whr[0][0]][whr[1][0]][0]\n\n                return compbest, dgbest, dmagsbest, logL, chisquared, chisquaredbest\n\n            comp1best[f], dgbest[f], dmagsbest[f], logL[f], chisquared[f], chisquaredbest[f] = run_regression(comp1, comp2, f)\n\n            \"\"\"\n            if saveLogL and deltaGrey != 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(LOGLDIRECTORY, name + '_logL.txt'), logL[f][:,:,np.where(dgrange == dgbest[f])[0][0]])\n                print 'Saved LogL at best fit deltaGrey for ' + f + ' filter.'\n            elif saveLogL and deltaGrey == 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(LOGLDIRECTORY, name + '_logL.txt'), logL[f][:,:])\n                print 'Saved LogL for ' + f + ' filter.'\n\n            if saveChiSquared and deltaGrey != 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(CHISQUAREDDIRECTORY, name + '_chi.txt'), chisquared[f][:,:,np.where(dgrange == dgbest[f])[0][0]])\n                print 'Saved Chi-Squared at best fit deltaGrey for ' + f + ' filter.'\n            elif saveChiSquared and deltaGrey == 0.0:\n                name = self._regressionNameGen(comp1, comp2, atmo_obs, componentBins, err, regressionSed, deltaGrey, deltaGreyBins, deltaGreyRange,\n                    add=pickleString, f=f)\n                np.savetxt(os.path.join(CHISQUAREDDIRECTORY, name + '_chi.txt'), chisquared[f][:,:])\n                print 'Saved Chi-Squared for ' + f + ' filter.'\n\n            \"\"\"\n\n            print 'Completed ' + f + ' filter.'\n            print ''\n\n        if verbose:\n            print ''\n            print r'Best fit parameters (Filter, %s, %s):' % (comp1, 'dG')\n            for f in filters:\n                print '%s %.2f %.2f' % (f, compbest[f], dgbest[f])\n    \n        if plotDphi:\n\n            throughput_fit = {}\n\n            for f in filters:\n                P_fit[pNum1] = compbest[f]\n                atmo_fit = self.buildAtmo(P_fit,X_fit)\n                throughput_fit[f] = self.combineThroughputs(atmo_fit,filters=f)[f]\n\n            self.dphiPlot(throughput_obs, throughput_std, bpDict2=throughput_fit, filters=filters, regression=True, figName=figName)\n            self.ddphiPlot(throughput_obs, throughput_fit, throughput_std, filters=filters, regression=True, figName=figName)\n\n        \"\"\"\n        if plotDmags:\n            comparison_dmags_fit, comparison_dmags_obs = self.regressionPlot(comp1, comp1best, comp2, comp2best, dgbest, logL, atmo_obs, componentBins=componentBins, deltaGrey=deltaGrey,\n                deltaGreyBins=deltaGreyBins, deltaGreyRange=deltaGreyRange, figName=figName, regressionSed=regressionSed, comparisonSeds=comparisonSeds, \n                plotDifferenceRegression=plotDifferenceRegression, plotDifferenceComparison=plotDifferenceComparison, useLogL=useLogL, \n                dmagLimit=dmagLimit, includeColorBar=includeColorBar, normalize=normalize, plotBoth=plotBoth, filters=filters, verbose=verbose)\n\n        if plotChiSquared:\n            self.chiSquaredPlot(comp1, comp1best, comp2, comp2best, dgbest, deltaGrey, chisquared, componentBins=componentBins, deltaGreyBins=deltaGreyBins, \n                deltaGreyRange=deltaGreyRange, filters=filters, figName=figName)\n        \"\"\"\n\n        if returnData:\n            return compbest, dgbest, dmagsbest,logL, chisquared, chisquaredbest, dmags_obs #, comparison_dmags_fit, comparison_dmags_obs\n        else:\n            return",
			"_computeLogL",
			"_dmagSED",
			"_sedFinder",
			"_colorCheck",
			"_sedReadCheck",
			"_sedTypeCheck",
			"_airmassCheck",
			"_parameterCheck",
			"_componentCheck",
			"_regressionNameGen",
			"_figNameGen",
			"_sedLabelGen",
			"_labelGen",
			"_dmagLimit",
			"_pToString",
			"_airmassToString",
			"bins",
			"filters == 'y4'",
			"filters=FILTERLIST",
			"filterCheck",
			"regressionNameGen",
			"self.wavelen",
			"wavelenRange",
			"WAVELENMAX",
			"WAVELENMIN",
			"FIGUREHEIGHT",
			"FIGUREWIDTH",
			"y4Check",
			"buildAtmo",
			"transDict",
			"buildAtmo",
			"transmission",
			"np",
			"plt"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "AtmoBuilder.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 133683,
						"regions":
						{
						},
						"selection":
						[
							[
								333,
								333
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 130.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Atmo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2411,
						"regions":
						{
						},
						"selection":
						[
							[
								2411,
								2411
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "writeup/stars2atmo.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12408,
						"regions":
						{
						},
						"selection":
						[
							[
								11461,
								11461
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/joachim/.bash_profile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1768,
						"regions":
						{
						},
						"selection":
						[
							[
								753,
								753
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 383.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/joachim/lsst/loadLSST.bash",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 607,
						"regions":
						{
						},
						"selection":
						[
							[
								607,
								607
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/usr/local/Library/Taps/homebrew/homebrew-science/opencv.rb",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6374,
						"regions":
						{
						},
						"selection":
						[
							[
								4648,
								4648
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 6,
					"file": "old/provided scripts/AtmoComp.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16325,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1832.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "old/provided scripts/plot_dmags.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36661,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-92-g76d04b8+5/python/lsst/sims/photUtils/PhysicalParameters.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2611,
						"regions":
						{
						},
						"selection":
						[
							[
								68,
								68
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-92-g76d04b8+5/python/lsst/sims/photUtils/Sed.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49616,
						"regions":
						{
						},
						"selection":
						[
							[
								5010,
								5010
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/Users/joachim/lsst/DarwinX86/sims_photUtils/1.0.0-92-g76d04b8+5/python/lsst/sims/photUtils/Bandpass.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21389,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3746.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.818566646205,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 25.0
	},
	"pinned_build_system": "",
	"project": "atmo2mags.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 226.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
